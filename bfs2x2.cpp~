char pawns[max][max];
struct xxx tmp,next;
if(pawns[i][1]=='w' && visit[i][1]==0){
	memset(column,0,sizeof(column));
	check=0;
	visit[i][1]=1;
	tmp.x=i,tmp.y=1;
	q.push(tmp);
	while(!q.empty()){
		tmp=q.front(), q.pop();
		column[tmp.y]=1;
		if(tmp.x-1>0&&tmp.y-1>0&&visit[tmp.x-1][tmp.y-1]==0){
			visit[tmp.x-1][tmp.y-1]=1;
			next.x=tmp.x-1,next.y=tmp.y-1;
			q.push(next);
		}//if
		if(tmp.x-1>0&&visit[tmp.x-1][tmp.y]==0){
			visit[tmp.x-1][tmp.y]=1;
			next.x=tmp.x-1,next.y=tmp.y;
			q.push(next);
		}//if
		if(tmp.y-1>0&&visit[tmp.x][tmp.y-1]==0){
			visit[tmp.x][tmp.y-1]=1;
			next.x=tmp.x,next.y=tmp.y-1;
			q.push(next);
		}//if
		if(tmp.y+1<=n&&visit[tmp.x][tmp.y+1]==0){
			visit[tmp.x][tmp.y+1]=1;
			next.x=tmp.x,next.y=tmp.y+1;
			q.push(next);
		}//if
		if(tmp.x+1<=n&&visit[tmp.x+1][tmp.y]==0){
			visit[tmp.x+1][tmp.y]=1;
			next.x=tmp.x+1,next.y=tmp.y;
			q.push(next);
		}//if
		if(tmp.x+1<=n&&tmp.y+1<=n&&visit[tmp.x+1][tmp.y+1]==0){
			visit[tmp.x+1][tmp.y+1]=1;
			next.x=tmp.x+1,next.y=tmp.y+1;
			q.push(next);
		}//if
	}//while
	for(int i=1;i<=n;i++)
		if(column[i]==1)
			check++;
	if(check==n){
		win=1;
		break;
	}
}//if
